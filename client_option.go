// Code generated by AfterShip SDK Generator. DO NOT EDIT.

package tracking

import (
	"os"
	"strconv"
	"strings"
)

const sdkPrefix = "AFTERSHIP_TRACKING_SDK_"

func init() {
	key := getEnv("API_KEY")
	if len(key) > 0 {
		defaultClientOptions.apiKey = strings.ToLower(key)
	}

	authType := getEnv("AUTHENTICATION_TYPE")
	if len(authType) > 0 {
		defaultClientOptions.authenticationType = strings.ToUpper(authType)
	}

	secret := getEnv("API_SECRET")
	if len(secret) > 0 {
		defaultClientOptions.apiSecret = strings.ToLower(secret)
	}

	domain := getEnv("DOMAIN")
	if len(domain) > 0 {
		defaultClientOptions.domain = domain
	}

	maxRetry := getEnv("MAX_RETRY")
	if len(maxRetry) > 0 {
		num, err := strconv.Atoi(maxRetry)
		if err == nil {
			defaultClientOptions.maxRetry = num
		}
	}

	timeout := getEnv("TIMEOUT")
	if len(timeout) > 0 {
		num, err := strconv.Atoi(timeout)
		if err == nil {
			defaultClientOptions.timeoutMs = int64(num)
		}
	}

	userAgent := getEnv("USER_AGENT")
	if len(userAgent) > 0 {
		defaultClientOptions.userAgent = userAgent
	}

	proxy := getEnv("PROXY")
	if len(proxy) > 0 {
		defaultClientOptions.proxy = proxy
	}
}

func getEnv(key string) string {
	return os.Getenv(sdkPrefix + key)
}

type clientOptions struct {
	domain             string
	maxRetry           int
	timeoutMs          int64
	userAgent          string
	proxy              string
	apiKey             string
	apiSecret          string
	authenticationType string
}

var defaultClientOptions = clientOptions{
    domain:    "https://api.aftership.com",
    maxRetry:  2,
    timeoutMs: 10000,
    userAgent: "tracking-sdk-go/v4 (https://www.aftership.com) Go-http-client/1.1",
    proxy:     "",
    apiKey:    "",
    apiSecret: "",
    authenticationType: "API_KEY",
}

type ClientOption interface {
	apply(options *clientOptions)
}

type funcClientOption struct {
	f func(options *clientOptions)
}

func (op *funcClientOption) apply(o *clientOptions) {
	op.f(o)
}

func newFuncOption(f func(options *clientOptions)) *funcClientOption {
	return &funcClientOption{
		f: f,
	}
}

func WithMaxRetry(maxRetry int) ClientOption {
	return newFuncOption(func(o *clientOptions) {
		o.maxRetry = maxRetry
	})
}

func WithTimeout(timeout int64) ClientOption {
	return newFuncOption(func(o *clientOptions) {
		o.timeoutMs = timeout
	})
}

func WithUserAgent(userAgent string) ClientOption {
	return newFuncOption(func(o *clientOptions) {
		o.userAgent = userAgent
	})
}

func WithProxy(proxy string) ClientOption {
	return newFuncOption(func(o *clientOptions) {
		o.proxy = proxy
	})
}

func WithApiKey(key string) ClientOption {
	return newFuncOption(func(o *clientOptions) {
		o.apiKey = key
	})
}

func WithSecret(secret string) ClientOption {
	return newFuncOption(func(o *clientOptions) {
		o.apiSecret = secret
	})
}

func WithAuthKind(kind string) ClientOption {
	return newFuncOption(func(o *clientOptions) {
		o.authenticationType = kind
	})
}

func WithHost(host string) ClientOption {
	return newFuncOption(func(o *clientOptions) {
		o.domain = host
	})
}
