// Code generated by AfterShip SDK Generator. DO NOT EDIT.

package request

import (
	"fmt"
	"net/http"
    "bytes"
    "encoding/json"
	"github.com/AfterShip/tracking-sdk-go/v4/component"
	"github.com/AfterShip/tracking-sdk-go/v4/errorx"
	"github.com/AfterShip/tracking-sdk-go/v4/model"
)

type DetectCourierRequest struct {
	body  model.DetectCourierRequest
	header http.Header
	sender *component.HttpSender
	requestBuilder
}

func NewDetectCourierRequest(sender *component.HttpSender) *DetectCourierRequest {
	return &DetectCourierRequest{
        sender: sender,
	}
}


func (t *DetectCourierRequest) BuildBody(body model.DetectCourierRequest) *DetectCourierRequest {
	t.body = body
	return t
}

func (t *DetectCourierRequest) BuildHeader(h http.Header) *DetectCourierRequest {
	t.header = h
	return t
}



func (t *DetectCourierRequest) build() (*http.Request, error) {
    uri := fmt.Sprintf("/tracking/2024-04/couriers/detect?") 
    body,err := json.Marshal(t.body)
    if err != nil {
        return nil, errorx.NewSdkError(errorx.ErrBadRequest, errorx.GetErrorMessage(errorx.ErrBadRequest), err.Error())
    }
    req, err := http.NewRequest("POST", uri, bytes.NewReader(body))
	if err != nil {
        return nil, errorx.NewSdkError(errorx.ErrBadRequest, errorx.GetErrorMessage(errorx.ErrBadRequest), err.Error())
	}
	t.requestBuilder.appendHeader(t.header, req)
	return req, nil
}

func (t *DetectCourierRequest) Execute() (  *model.DetectCourierResponse, error) {
	req, err := t.build()
	if err != nil {
        return nil, errorx.NewSdkError(errorx.ErrBadRequest, errorx.GetErrorMessage(errorx.ErrBadRequest), err.Error())
	}
	var data model.DetectCourierResponse
	return &data, t.sender.Do(req, &data)
}