// Code generated by AfterShip SDK Generator. DO NOT EDIT.

package request

import (
    "errors"
	"fmt"
	"net/http"
	"github.com/AfterShip/tracking-sdk-go/v4/component"
	"github.com/AfterShip/tracking-sdk-go/v4/errorx"
	"github.com/AfterShip/tracking-sdk-go/v4/model"
)

type GetNotificationByTrackingIdRequest struct {
	trackingId     string
	header http.Header
	sender *component.HttpSender
	requestBuilder
}

func NewGetNotificationByTrackingIdRequest(sender *component.HttpSender) *GetNotificationByTrackingIdRequest {
	return &GetNotificationByTrackingIdRequest{
        sender: sender,
	}
}



func (t *GetNotificationByTrackingIdRequest) BuildHeader(h http.Header) *GetNotificationByTrackingIdRequest {
	t.header = h
	return t
}

func (t *GetNotificationByTrackingIdRequest) BuildPath( trackingId string,) *GetNotificationByTrackingIdRequest {
	t.trackingId = trackingId
	return t
}

func (t *GetNotificationByTrackingIdRequest) isPathParamValid() error {
    if t.trackingId == "" {
        return errors.New("path param `trackingId` can not be empty")
    }
    return nil
}

func (t *GetNotificationByTrackingIdRequest) build() (*http.Request, error) {
    if err := t.isPathParamValid(); err != nil {
        return nil, errorx.NewSdkError(errorx.ErrBadRequest, errorx.GetErrorMessage(errorx.ErrBadRequest), err.Error())
    }
    uri := fmt.Sprintf("/tracking/2024-04/notifications/%s?",  t.trackingId,) 
    req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
        return nil, errorx.NewSdkError(errorx.ErrBadRequest, errorx.GetErrorMessage(errorx.ErrBadRequest), err.Error())
	}
	t.requestBuilder.appendHeader(t.header, req)
	return req, nil
}

func (t *GetNotificationByTrackingIdRequest) Execute() ( *model.Notification , error) {
	req, err := t.build()
	if err != nil {
        return nil, errorx.NewSdkError(errorx.ErrBadRequest, errorx.GetErrorMessage(errorx.ErrBadRequest), err.Error())
	}
	var data model.GetNotificationByTrackingIdResponse
	err = t.sender.Do(req, &data)
	return &data.Notification,err
}