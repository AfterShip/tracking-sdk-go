// Code generated by AfterShip SDK Generator. DO NOT EDIT.

package request

import (
	"fmt"
	"net/http"
	"github.com/google/go-querystring/query"
	"github.com/AfterShip/tracking-sdk-go/v4/component"
	"github.com/AfterShip/tracking-sdk-go/v4/errorx"
	"github.com/AfterShip/tracking-sdk-go/v4/model"
)

type GetTrackingsRequest struct {
    query  model.GetTrackingsQuery
	header http.Header
	sender *component.HttpSender
	requestBuilder
}

func NewGetTrackingsRequest(sender *component.HttpSender) *GetTrackingsRequest {
	return &GetTrackingsRequest{
        sender: sender,
	}
}

func (t *GetTrackingsRequest) BuildQuery(query model.GetTrackingsQuery) *GetTrackingsRequest {
	t.query = query
	return t
}


func (t *GetTrackingsRequest) BuildHeader(h http.Header) *GetTrackingsRequest {
	t.header = h
	return t
}



func (t *GetTrackingsRequest) build() (*http.Request, error) {
	q, err := query.Values(t.query)
	if err != nil {
        return nil, errorx.NewSdkError(errorx.ErrBadRequest, errorx.GetErrorMessage(errorx.ErrBadRequest), err.Error())
	}
    uri := fmt.Sprintf("/tracking/2024-04/trackings?")  + q.Encode()
    req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
        return nil, errorx.NewSdkError(errorx.ErrBadRequest, errorx.GetErrorMessage(errorx.ErrBadRequest), err.Error())
	}
	t.requestBuilder.appendHeader(t.header, req)
	return req, nil
}

func (t *GetTrackingsRequest) Execute() (*model.TrackingPagination , error) {
	req, err := t.build()
	if err != nil {
        return nil, errorx.NewSdkError(errorx.ErrBadRequest, errorx.GetErrorMessage(errorx.ErrBadRequest), err.Error())
	}
    var data model.GetTrackingsResponse
    err = t.sender.Do(req, &data)
    var result model.TrackingPagination
    result.Limit = data.Limit
    result.Page = data.Page
    result.Total = data.Count
    result.Tracking = data.Trackings
    return &result, err
}